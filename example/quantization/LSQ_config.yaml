# Instance name
name: "QuantizationAwareTraining"

# How many GPUs to train/test
n_gpu: 1

# Random seed
random_seed: 2333

# Model
arch:
    type: "cifar_resnet56"         # name in `model` package
    args:
        pretrained: false
        num_classes: 10
    load_from_pth: "saved/models/Classification/0716_222211/model_best-0.9437.pth"      # path to pretrained .pth file


dataloaders:
    train:
        type: "CIFAR10"    # name in data_loader/data_loaders.py
        args:
            data_dir: "/data"
            training: true
            batch_size: 128
            shuffle: true
            drop_last: true
            num_workers: 8
    test:
        type: "CIFAR10"    # name in data_loader/data_loaders.py
        args:
            data_dir: "/data"
            training: false
            batch_size: 1024
            shuffle: false
            num_workers: 0

# Options for quantization
quantization:
    weight:
        enable: true
        type: "LSQ"
        args:
            n_bits: 3
            signed: true
    input:
        enable: true
        type: "LSQ"
        args:
            n_bits: 3
            signed: false
    exclude_layers: ["conv1", "linear"]           # name of layers to exclude (with fp32 precision), regular expression supported
    override_options:            # override options for some specified layers
        - layers: []
          options:
              weight: {args: {n_bits: 8, signed: false}}
              input: {type: "minmax_tensor", args: {n_bits: 8, signed: false}}
        - layers: []    # name of layers to override options, regular expression supported
          options:
              weight: {args: {n_bits: 8}}
              input: {args: {n_bits: 8}}

# Options for training
optimizer:
    type: "SGD"               # name in torch.optim
    args:
        nesterov: true
        lr: 1e-2 
        weight_decay: 5e-5
        momentum: 0.9
loss: "cross_entropy_loss"               # name in trainer/loss
metrics:                       # name in trainer/metrics
    - "accuracy"
    - "top5_acc"
lr_scheduler:
    type: "CosineDecayLR"            # name in torch.optim.lr_scheduler
    args:
        steps_per_epc: 390
        total_epochs: 90
        warmup_steps: 0
    #type: "MultiStepLR"            # name in torch.optim.lr_scheduler
    #args:
    #    milestones: [60, 120, 160]
    #    gamma: 0.2

grad_clip_param: 0
trainer:
    epochs: 90
    save_dir: "saved/"
    train_log_density: 3
    valid_log_density: 1
    save_period: 10
    verbosity: 2
    monitor: "max val_accuracy"
    #early_stop: 120
    tensorboard: false
    save_to_disk: false
    #update_qparams_period: 1000     # step period to update quantized params(scales and offsets)
    freeze_bn: false                 # if True, statistics parameters of BN layers will be frozen
